// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: message.proto
// Protobuf C++ Version: 5.29.3

#include "message.pb.h"

#include <algorithm>
#include <type_traits>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace unifly {
namespace schema {

inline constexpr XPlaneMessage::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : kind_{},
        _cached_size_{0},
        _oneof_case_{} {}

template <typename>
PROTOBUF_CONSTEXPR XPlaneMessage::XPlaneMessage(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct XPlaneMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR XPlaneMessageDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~XPlaneMessageDefaultTypeInternal() {}
  union {
    XPlaneMessage _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 XPlaneMessageDefaultTypeInternal _XPlaneMessage_default_instance_;

inline constexpr XPLMMessage::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : kind_{},
        _cached_size_{0},
        _oneof_case_{} {}

template <typename>
PROTOBUF_CONSTEXPR XPLMMessage::XPLMMessage(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct XPLMMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR XPLMMessageDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~XPLMMessageDefaultTypeInternal() {}
  union {
    XPLMMessage _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 XPLMMessageDefaultTypeInternal _XPLMMessage_default_instance_;
}  // namespace schema
}  // namespace unifly
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_message_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_message_2eproto = nullptr;
const ::uint32_t
    TableStruct_message_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::unifly::schema::XPlaneMessage, _internal_metadata_),
        ~0u,  // no _extensions_
        PROTOBUF_FIELD_OFFSET(::unifly::schema::XPlaneMessage, _impl_._oneof_case_[0]),
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        PROTOBUF_FIELD_OFFSET(::unifly::schema::XPlaneMessage, _impl_.kind_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::unifly::schema::XPLMMessage, _internal_metadata_),
        ~0u,  // no _extensions_
        PROTOBUF_FIELD_OFFSET(::unifly::schema::XPLMMessage, _impl_._oneof_case_[0]),
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        PROTOBUF_FIELD_OFFSET(::unifly::schema::XPLMMessage, _impl_.kind_),
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, -1, -1, sizeof(::unifly::schema::XPlaneMessage)},
        {11, -1, -1, sizeof(::unifly::schema::XPLMMessage)},
};
static const ::_pb::Message* const file_default_instances[] = {
    &::unifly::schema::_XPlaneMessage_default_instance_._instance,
    &::unifly::schema::_XPLMMessage_default_instance_._instance,
};
const char descriptor_table_protodef_message_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n\rmessage.proto\022\runifly.schema\032\021pilot_lo"
    "cal.proto\032\022pilot_remote.proto\"\245\001\n\rXPlane"
    "Message\022C\n\025write_remote_frequent\030\001 \001(\0132\""
    ".unifly.schema.WriteRemoteFrequentH\000\022G\n\027"
    "write_remote_infrequent\030\002 \001(\0132$.unifly.s"
    "chema.WriteRemoteInfrequentH\000B\006\n\004kind\"\233\001"
    "\n\013XPLMMessage\022\?\n\023read_local_frequent\030\001 \001"
    "(\0132 .unifly.schema.ReadLocalFrequentH\000\022C"
    "\n\025read_local_infrequent\030\002 \001(\0132\".unifly.s"
    "chema.ReadLocalInfrequentH\000B\006\n\004kindb\006pro"
    "to3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_message_2eproto_deps[2] =
    {
        &::descriptor_table_pilot_5flocal_2eproto,
        &::descriptor_table_pilot_5fremote_2eproto,
};
static ::absl::once_flag descriptor_table_message_2eproto_once;
PROTOBUF_CONSTINIT const ::_pbi::DescriptorTable descriptor_table_message_2eproto = {
    false,
    false,
    403,
    descriptor_table_protodef_message_2eproto,
    "message.proto",
    &descriptor_table_message_2eproto_once,
    descriptor_table_message_2eproto_deps,
    2,
    2,
    schemas,
    file_default_instances,
    TableStruct_message_2eproto::offsets,
    file_level_enum_descriptors_message_2eproto,
    file_level_service_descriptors_message_2eproto,
};
namespace unifly {
namespace schema {
// ===================================================================

class XPlaneMessage::_Internal {
 public:
  static constexpr ::int32_t kOneofCaseOffset =
      PROTOBUF_FIELD_OFFSET(::unifly::schema::XPlaneMessage, _impl_._oneof_case_);
};

void XPlaneMessage::set_allocated_write_remote_frequent(::unifly::schema::WriteRemoteFrequent* write_remote_frequent) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_kind();
  if (write_remote_frequent) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(write_remote_frequent)->GetArena();
    if (message_arena != submessage_arena) {
      write_remote_frequent = ::google::protobuf::internal::GetOwnedMessage(message_arena, write_remote_frequent, submessage_arena);
    }
    set_has_write_remote_frequent();
    _impl_.kind_.write_remote_frequent_ = write_remote_frequent;
  }
  // @@protoc_insertion_point(field_set_allocated:unifly.schema.XPlaneMessage.write_remote_frequent)
}
void XPlaneMessage::clear_write_remote_frequent() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (kind_case() == kWriteRemoteFrequent) {
    if (GetArena() == nullptr) {
      delete _impl_.kind_.write_remote_frequent_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.kind_.write_remote_frequent_);
    }
    clear_has_kind();
  }
}
void XPlaneMessage::set_allocated_write_remote_infrequent(::unifly::schema::WriteRemoteInfrequent* write_remote_infrequent) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_kind();
  if (write_remote_infrequent) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(write_remote_infrequent)->GetArena();
    if (message_arena != submessage_arena) {
      write_remote_infrequent = ::google::protobuf::internal::GetOwnedMessage(message_arena, write_remote_infrequent, submessage_arena);
    }
    set_has_write_remote_infrequent();
    _impl_.kind_.write_remote_infrequent_ = write_remote_infrequent;
  }
  // @@protoc_insertion_point(field_set_allocated:unifly.schema.XPlaneMessage.write_remote_infrequent)
}
void XPlaneMessage::clear_write_remote_infrequent() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (kind_case() == kWriteRemoteInfrequent) {
    if (GetArena() == nullptr) {
      delete _impl_.kind_.write_remote_infrequent_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.kind_.write_remote_infrequent_);
    }
    clear_has_kind();
  }
}
XPlaneMessage::XPlaneMessage(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:unifly.schema.XPlaneMessage)
}
inline PROTOBUF_NDEBUG_INLINE XPlaneMessage::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::unifly::schema::XPlaneMessage& from_msg)
      : kind_{},
        _cached_size_{0},
        _oneof_case_{from._oneof_case_[0]} {}

XPlaneMessage::XPlaneMessage(
    ::google::protobuf::Arena* arena,
    const XPlaneMessage& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  XPlaneMessage* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  switch (kind_case()) {
    case KIND_NOT_SET:
      break;
      case kWriteRemoteFrequent:
        _impl_.kind_.write_remote_frequent_ = ::google::protobuf::Message::CopyConstruct<::unifly::schema::WriteRemoteFrequent>(arena, *from._impl_.kind_.write_remote_frequent_);
        break;
      case kWriteRemoteInfrequent:
        _impl_.kind_.write_remote_infrequent_ = ::google::protobuf::Message::CopyConstruct<::unifly::schema::WriteRemoteInfrequent>(arena, *from._impl_.kind_.write_remote_infrequent_);
        break;
  }

  // @@protoc_insertion_point(copy_constructor:unifly.schema.XPlaneMessage)
}
inline PROTOBUF_NDEBUG_INLINE XPlaneMessage::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : kind_{},
        _cached_size_{0},
        _oneof_case_{} {}

inline void XPlaneMessage::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
XPlaneMessage::~XPlaneMessage() {
  // @@protoc_insertion_point(destructor:unifly.schema.XPlaneMessage)
  SharedDtor(*this);
}
inline void XPlaneMessage::SharedDtor(MessageLite& self) {
  XPlaneMessage& this_ = static_cast<XPlaneMessage&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  if (this_.has_kind()) {
    this_.clear_kind();
  }
  this_._impl_.~Impl_();
}

void XPlaneMessage::clear_kind() {
// @@protoc_insertion_point(one_of_clear_start:unifly.schema.XPlaneMessage)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  switch (kind_case()) {
    case kWriteRemoteFrequent: {
      if (GetArena() == nullptr) {
        delete _impl_.kind_.write_remote_frequent_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.kind_.write_remote_frequent_);
      }
      break;
    }
    case kWriteRemoteInfrequent: {
      if (GetArena() == nullptr) {
        delete _impl_.kind_.write_remote_infrequent_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.kind_.write_remote_infrequent_);
      }
      break;
    }
    case KIND_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = KIND_NOT_SET;
}


inline void* XPlaneMessage::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) XPlaneMessage(arena);
}
constexpr auto XPlaneMessage::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(XPlaneMessage),
                                            alignof(XPlaneMessage));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull XPlaneMessage::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_XPlaneMessage_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &XPlaneMessage::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<XPlaneMessage>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &XPlaneMessage::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<XPlaneMessage>(), &XPlaneMessage::ByteSizeLong,
            &XPlaneMessage::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(XPlaneMessage, _impl_._cached_size_),
        false,
    },
    &XPlaneMessage::kDescriptorMethods,
    &descriptor_table_message_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* XPlaneMessage::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 2, 2, 0, 2> XPlaneMessage::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::unifly::schema::XPlaneMessage>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // .unifly.schema.WriteRemoteFrequent write_remote_frequent = 1;
    {PROTOBUF_FIELD_OFFSET(XPlaneMessage, _impl_.kind_.write_remote_frequent_), _Internal::kOneofCaseOffset + 0, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .unifly.schema.WriteRemoteInfrequent write_remote_infrequent = 2;
    {PROTOBUF_FIELD_OFFSET(XPlaneMessage, _impl_.kind_.write_remote_infrequent_), _Internal::kOneofCaseOffset + 0, 1,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::unifly::schema::WriteRemoteFrequent>()},
    {::_pbi::TcParser::GetTable<::unifly::schema::WriteRemoteInfrequent>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void XPlaneMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:unifly.schema.XPlaneMessage)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_kind();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* XPlaneMessage::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const XPlaneMessage& this_ = static_cast<const XPlaneMessage&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* XPlaneMessage::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const XPlaneMessage& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:unifly.schema.XPlaneMessage)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          switch (this_.kind_case()) {
            case kWriteRemoteFrequent: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  1, *this_._impl_.kind_.write_remote_frequent_, this_._impl_.kind_.write_remote_frequent_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kWriteRemoteInfrequent: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  2, *this_._impl_.kind_.write_remote_infrequent_, this_._impl_.kind_.write_remote_infrequent_->GetCachedSize(), target,
                  stream);
              break;
            }
            default:
              break;
          }
          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:unifly.schema.XPlaneMessage)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t XPlaneMessage::ByteSizeLong(const MessageLite& base) {
          const XPlaneMessage& this_ = static_cast<const XPlaneMessage&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t XPlaneMessage::ByteSizeLong() const {
          const XPlaneMessage& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:unifly.schema.XPlaneMessage)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          switch (this_.kind_case()) {
            // .unifly.schema.WriteRemoteFrequent write_remote_frequent = 1;
            case kWriteRemoteFrequent: {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.kind_.write_remote_frequent_);
              break;
            }
            // .unifly.schema.WriteRemoteInfrequent write_remote_infrequent = 2;
            case kWriteRemoteInfrequent: {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.kind_.write_remote_infrequent_);
              break;
            }
            case KIND_NOT_SET: {
              break;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void XPlaneMessage::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<XPlaneMessage*>(&to_msg);
  auto& from = static_cast<const XPlaneMessage&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:unifly.schema.XPlaneMessage)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (const uint32_t oneof_from_case = from._impl_._oneof_case_[0]) {
    const uint32_t oneof_to_case = _this->_impl_._oneof_case_[0];
    const bool oneof_needs_init = oneof_to_case != oneof_from_case;
    if (oneof_needs_init) {
      if (oneof_to_case != 0) {
        _this->clear_kind();
      }
      _this->_impl_._oneof_case_[0] = oneof_from_case;
    }

    switch (oneof_from_case) {
      case kWriteRemoteFrequent: {
        if (oneof_needs_init) {
          _this->_impl_.kind_.write_remote_frequent_ =
              ::google::protobuf::Message::CopyConstruct<::unifly::schema::WriteRemoteFrequent>(arena, *from._impl_.kind_.write_remote_frequent_);
        } else {
          _this->_impl_.kind_.write_remote_frequent_->MergeFrom(from._internal_write_remote_frequent());
        }
        break;
      }
      case kWriteRemoteInfrequent: {
        if (oneof_needs_init) {
          _this->_impl_.kind_.write_remote_infrequent_ =
              ::google::protobuf::Message::CopyConstruct<::unifly::schema::WriteRemoteInfrequent>(arena, *from._impl_.kind_.write_remote_infrequent_);
        } else {
          _this->_impl_.kind_.write_remote_infrequent_->MergeFrom(from._internal_write_remote_infrequent());
        }
        break;
      }
      case KIND_NOT_SET:
        break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void XPlaneMessage::CopyFrom(const XPlaneMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unifly.schema.XPlaneMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void XPlaneMessage::InternalSwap(XPlaneMessage* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.kind_, other->_impl_.kind_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::google::protobuf::Metadata XPlaneMessage::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class XPLMMessage::_Internal {
 public:
  static constexpr ::int32_t kOneofCaseOffset =
      PROTOBUF_FIELD_OFFSET(::unifly::schema::XPLMMessage, _impl_._oneof_case_);
};

void XPLMMessage::set_allocated_read_local_frequent(::unifly::schema::ReadLocalFrequent* read_local_frequent) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_kind();
  if (read_local_frequent) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(read_local_frequent)->GetArena();
    if (message_arena != submessage_arena) {
      read_local_frequent = ::google::protobuf::internal::GetOwnedMessage(message_arena, read_local_frequent, submessage_arena);
    }
    set_has_read_local_frequent();
    _impl_.kind_.read_local_frequent_ = read_local_frequent;
  }
  // @@protoc_insertion_point(field_set_allocated:unifly.schema.XPLMMessage.read_local_frequent)
}
void XPLMMessage::clear_read_local_frequent() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (kind_case() == kReadLocalFrequent) {
    if (GetArena() == nullptr) {
      delete _impl_.kind_.read_local_frequent_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.kind_.read_local_frequent_);
    }
    clear_has_kind();
  }
}
void XPLMMessage::set_allocated_read_local_infrequent(::unifly::schema::ReadLocalInfrequent* read_local_infrequent) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_kind();
  if (read_local_infrequent) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(read_local_infrequent)->GetArena();
    if (message_arena != submessage_arena) {
      read_local_infrequent = ::google::protobuf::internal::GetOwnedMessage(message_arena, read_local_infrequent, submessage_arena);
    }
    set_has_read_local_infrequent();
    _impl_.kind_.read_local_infrequent_ = read_local_infrequent;
  }
  // @@protoc_insertion_point(field_set_allocated:unifly.schema.XPLMMessage.read_local_infrequent)
}
void XPLMMessage::clear_read_local_infrequent() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (kind_case() == kReadLocalInfrequent) {
    if (GetArena() == nullptr) {
      delete _impl_.kind_.read_local_infrequent_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.kind_.read_local_infrequent_);
    }
    clear_has_kind();
  }
}
XPLMMessage::XPLMMessage(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:unifly.schema.XPLMMessage)
}
inline PROTOBUF_NDEBUG_INLINE XPLMMessage::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::unifly::schema::XPLMMessage& from_msg)
      : kind_{},
        _cached_size_{0},
        _oneof_case_{from._oneof_case_[0]} {}

XPLMMessage::XPLMMessage(
    ::google::protobuf::Arena* arena,
    const XPLMMessage& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  XPLMMessage* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  switch (kind_case()) {
    case KIND_NOT_SET:
      break;
      case kReadLocalFrequent:
        _impl_.kind_.read_local_frequent_ = ::google::protobuf::Message::CopyConstruct<::unifly::schema::ReadLocalFrequent>(arena, *from._impl_.kind_.read_local_frequent_);
        break;
      case kReadLocalInfrequent:
        _impl_.kind_.read_local_infrequent_ = ::google::protobuf::Message::CopyConstruct<::unifly::schema::ReadLocalInfrequent>(arena, *from._impl_.kind_.read_local_infrequent_);
        break;
  }

  // @@protoc_insertion_point(copy_constructor:unifly.schema.XPLMMessage)
}
inline PROTOBUF_NDEBUG_INLINE XPLMMessage::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : kind_{},
        _cached_size_{0},
        _oneof_case_{} {}

inline void XPLMMessage::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
XPLMMessage::~XPLMMessage() {
  // @@protoc_insertion_point(destructor:unifly.schema.XPLMMessage)
  SharedDtor(*this);
}
inline void XPLMMessage::SharedDtor(MessageLite& self) {
  XPLMMessage& this_ = static_cast<XPLMMessage&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  if (this_.has_kind()) {
    this_.clear_kind();
  }
  this_._impl_.~Impl_();
}

void XPLMMessage::clear_kind() {
// @@protoc_insertion_point(one_of_clear_start:unifly.schema.XPLMMessage)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  switch (kind_case()) {
    case kReadLocalFrequent: {
      if (GetArena() == nullptr) {
        delete _impl_.kind_.read_local_frequent_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.kind_.read_local_frequent_);
      }
      break;
    }
    case kReadLocalInfrequent: {
      if (GetArena() == nullptr) {
        delete _impl_.kind_.read_local_infrequent_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.kind_.read_local_infrequent_);
      }
      break;
    }
    case KIND_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = KIND_NOT_SET;
}


inline void* XPLMMessage::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) XPLMMessage(arena);
}
constexpr auto XPLMMessage::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(XPLMMessage),
                                            alignof(XPLMMessage));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull XPLMMessage::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_XPLMMessage_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &XPLMMessage::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<XPLMMessage>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &XPLMMessage::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<XPLMMessage>(), &XPLMMessage::ByteSizeLong,
            &XPLMMessage::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(XPLMMessage, _impl_._cached_size_),
        false,
    },
    &XPLMMessage::kDescriptorMethods,
    &descriptor_table_message_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* XPLMMessage::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 2, 2, 0, 2> XPLMMessage::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::unifly::schema::XPLMMessage>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // .unifly.schema.ReadLocalFrequent read_local_frequent = 1;
    {PROTOBUF_FIELD_OFFSET(XPLMMessage, _impl_.kind_.read_local_frequent_), _Internal::kOneofCaseOffset + 0, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .unifly.schema.ReadLocalInfrequent read_local_infrequent = 2;
    {PROTOBUF_FIELD_OFFSET(XPLMMessage, _impl_.kind_.read_local_infrequent_), _Internal::kOneofCaseOffset + 0, 1,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::unifly::schema::ReadLocalFrequent>()},
    {::_pbi::TcParser::GetTable<::unifly::schema::ReadLocalInfrequent>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void XPLMMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:unifly.schema.XPLMMessage)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_kind();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* XPLMMessage::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const XPLMMessage& this_ = static_cast<const XPLMMessage&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* XPLMMessage::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const XPLMMessage& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:unifly.schema.XPLMMessage)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          switch (this_.kind_case()) {
            case kReadLocalFrequent: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  1, *this_._impl_.kind_.read_local_frequent_, this_._impl_.kind_.read_local_frequent_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kReadLocalInfrequent: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  2, *this_._impl_.kind_.read_local_infrequent_, this_._impl_.kind_.read_local_infrequent_->GetCachedSize(), target,
                  stream);
              break;
            }
            default:
              break;
          }
          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:unifly.schema.XPLMMessage)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t XPLMMessage::ByteSizeLong(const MessageLite& base) {
          const XPLMMessage& this_ = static_cast<const XPLMMessage&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t XPLMMessage::ByteSizeLong() const {
          const XPLMMessage& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:unifly.schema.XPLMMessage)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          switch (this_.kind_case()) {
            // .unifly.schema.ReadLocalFrequent read_local_frequent = 1;
            case kReadLocalFrequent: {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.kind_.read_local_frequent_);
              break;
            }
            // .unifly.schema.ReadLocalInfrequent read_local_infrequent = 2;
            case kReadLocalInfrequent: {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.kind_.read_local_infrequent_);
              break;
            }
            case KIND_NOT_SET: {
              break;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void XPLMMessage::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<XPLMMessage*>(&to_msg);
  auto& from = static_cast<const XPLMMessage&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:unifly.schema.XPLMMessage)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (const uint32_t oneof_from_case = from._impl_._oneof_case_[0]) {
    const uint32_t oneof_to_case = _this->_impl_._oneof_case_[0];
    const bool oneof_needs_init = oneof_to_case != oneof_from_case;
    if (oneof_needs_init) {
      if (oneof_to_case != 0) {
        _this->clear_kind();
      }
      _this->_impl_._oneof_case_[0] = oneof_from_case;
    }

    switch (oneof_from_case) {
      case kReadLocalFrequent: {
        if (oneof_needs_init) {
          _this->_impl_.kind_.read_local_frequent_ =
              ::google::protobuf::Message::CopyConstruct<::unifly::schema::ReadLocalFrequent>(arena, *from._impl_.kind_.read_local_frequent_);
        } else {
          _this->_impl_.kind_.read_local_frequent_->MergeFrom(from._internal_read_local_frequent());
        }
        break;
      }
      case kReadLocalInfrequent: {
        if (oneof_needs_init) {
          _this->_impl_.kind_.read_local_infrequent_ =
              ::google::protobuf::Message::CopyConstruct<::unifly::schema::ReadLocalInfrequent>(arena, *from._impl_.kind_.read_local_infrequent_);
        } else {
          _this->_impl_.kind_.read_local_infrequent_->MergeFrom(from._internal_read_local_infrequent());
        }
        break;
      }
      case KIND_NOT_SET:
        break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void XPLMMessage::CopyFrom(const XPLMMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:unifly.schema.XPLMMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void XPLMMessage::InternalSwap(XPLMMessage* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.kind_, other->_impl_.kind_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::google::protobuf::Metadata XPLMMessage::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace schema
}  // namespace unifly
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::std::false_type
    _static_init2_ PROTOBUF_UNUSED =
        (::_pbi::AddDescriptors(&descriptor_table_message_2eproto),
         ::std::false_type{});
#include "google/protobuf/port_undef.inc"
