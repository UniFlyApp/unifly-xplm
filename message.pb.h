// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: message.proto
// Protobuf C++ Version: 5.29.3

#ifndef message_2eproto_2epb_2eh
#define message_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029003
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "pilot_local.pb.h"
#include "pilot_remote.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_message_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_message_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_message_2eproto;
namespace unifly {
namespace schema {
class XPLMMessage;
struct XPLMMessageDefaultTypeInternal;
extern XPLMMessageDefaultTypeInternal _XPLMMessage_default_instance_;
class XPlaneMessage;
struct XPlaneMessageDefaultTypeInternal;
extern XPlaneMessageDefaultTypeInternal _XPlaneMessage_default_instance_;
}  // namespace schema
}  // namespace unifly
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace unifly {
namespace schema {

// ===================================================================


// -------------------------------------------------------------------

class XPlaneMessage final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:unifly.schema.XPlaneMessage) */ {
 public:
  inline XPlaneMessage() : XPlaneMessage(nullptr) {}
  ~XPlaneMessage() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(XPlaneMessage* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(XPlaneMessage));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR XPlaneMessage(
      ::google::protobuf::internal::ConstantInitialized);

  inline XPlaneMessage(const XPlaneMessage& from) : XPlaneMessage(nullptr, from) {}
  inline XPlaneMessage(XPlaneMessage&& from) noexcept
      : XPlaneMessage(nullptr, std::move(from)) {}
  inline XPlaneMessage& operator=(const XPlaneMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline XPlaneMessage& operator=(XPlaneMessage&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const XPlaneMessage& default_instance() {
    return *internal_default_instance();
  }
  enum KindCase {
    kWriteRemoteFrequent = 1,
    kWriteRemoteInfrequent = 2,
    KIND_NOT_SET = 0,
  };
  static inline const XPlaneMessage* internal_default_instance() {
    return reinterpret_cast<const XPlaneMessage*>(
        &_XPlaneMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(XPlaneMessage& a, XPlaneMessage& b) { a.Swap(&b); }
  inline void Swap(XPlaneMessage* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(XPlaneMessage* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  XPlaneMessage* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<XPlaneMessage>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const XPlaneMessage& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const XPlaneMessage& from) { XPlaneMessage::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(XPlaneMessage* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "unifly.schema.XPlaneMessage"; }

 protected:
  explicit XPlaneMessage(::google::protobuf::Arena* arena);
  XPlaneMessage(::google::protobuf::Arena* arena, const XPlaneMessage& from);
  XPlaneMessage(::google::protobuf::Arena* arena, XPlaneMessage&& from) noexcept
      : XPlaneMessage(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kWriteRemoteFrequentFieldNumber = 1,
    kWriteRemoteInfrequentFieldNumber = 2,
  };
  // .unifly.schema.WriteRemoteFrequent write_remote_frequent = 1;
  bool has_write_remote_frequent() const;
  private:
  bool _internal_has_write_remote_frequent() const;

  public:
  void clear_write_remote_frequent() ;
  const ::unifly::schema::WriteRemoteFrequent& write_remote_frequent() const;
  PROTOBUF_NODISCARD ::unifly::schema::WriteRemoteFrequent* release_write_remote_frequent();
  ::unifly::schema::WriteRemoteFrequent* mutable_write_remote_frequent();
  void set_allocated_write_remote_frequent(::unifly::schema::WriteRemoteFrequent* value);
  void unsafe_arena_set_allocated_write_remote_frequent(::unifly::schema::WriteRemoteFrequent* value);
  ::unifly::schema::WriteRemoteFrequent* unsafe_arena_release_write_remote_frequent();

  private:
  const ::unifly::schema::WriteRemoteFrequent& _internal_write_remote_frequent() const;
  ::unifly::schema::WriteRemoteFrequent* _internal_mutable_write_remote_frequent();

  public:
  // .unifly.schema.WriteRemoteInfrequent write_remote_infrequent = 2;
  bool has_write_remote_infrequent() const;
  private:
  bool _internal_has_write_remote_infrequent() const;

  public:
  void clear_write_remote_infrequent() ;
  const ::unifly::schema::WriteRemoteInfrequent& write_remote_infrequent() const;
  PROTOBUF_NODISCARD ::unifly::schema::WriteRemoteInfrequent* release_write_remote_infrequent();
  ::unifly::schema::WriteRemoteInfrequent* mutable_write_remote_infrequent();
  void set_allocated_write_remote_infrequent(::unifly::schema::WriteRemoteInfrequent* value);
  void unsafe_arena_set_allocated_write_remote_infrequent(::unifly::schema::WriteRemoteInfrequent* value);
  ::unifly::schema::WriteRemoteInfrequent* unsafe_arena_release_write_remote_infrequent();

  private:
  const ::unifly::schema::WriteRemoteInfrequent& _internal_write_remote_infrequent() const;
  ::unifly::schema::WriteRemoteInfrequent* _internal_mutable_write_remote_infrequent();

  public:
  void clear_kind();
  KindCase kind_case() const;
  // @@protoc_insertion_point(class_scope:unifly.schema.XPlaneMessage)
 private:
  class _Internal;
  void set_has_write_remote_frequent();
  void set_has_write_remote_infrequent();
  inline bool has_kind() const;
  inline void clear_has_kind();
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 2, 2,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const XPlaneMessage& from_msg);
    union KindUnion {
      constexpr KindUnion() : _constinit_{} {}
      ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::unifly::schema::WriteRemoteFrequent* write_remote_frequent_;
      ::unifly::schema::WriteRemoteInfrequent* write_remote_infrequent_;
    } kind_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class XPLMMessage final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:unifly.schema.XPLMMessage) */ {
 public:
  inline XPLMMessage() : XPLMMessage(nullptr) {}
  ~XPLMMessage() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(XPLMMessage* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(XPLMMessage));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR XPLMMessage(
      ::google::protobuf::internal::ConstantInitialized);

  inline XPLMMessage(const XPLMMessage& from) : XPLMMessage(nullptr, from) {}
  inline XPLMMessage(XPLMMessage&& from) noexcept
      : XPLMMessage(nullptr, std::move(from)) {}
  inline XPLMMessage& operator=(const XPLMMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline XPLMMessage& operator=(XPLMMessage&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const XPLMMessage& default_instance() {
    return *internal_default_instance();
  }
  enum KindCase {
    kReadLocalFrequent = 1,
    kReadLocalInfrequent = 2,
    KIND_NOT_SET = 0,
  };
  static inline const XPLMMessage* internal_default_instance() {
    return reinterpret_cast<const XPLMMessage*>(
        &_XPLMMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(XPLMMessage& a, XPLMMessage& b) { a.Swap(&b); }
  inline void Swap(XPLMMessage* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(XPLMMessage* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  XPLMMessage* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<XPLMMessage>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const XPLMMessage& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const XPLMMessage& from) { XPLMMessage::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(XPLMMessage* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "unifly.schema.XPLMMessage"; }

 protected:
  explicit XPLMMessage(::google::protobuf::Arena* arena);
  XPLMMessage(::google::protobuf::Arena* arena, const XPLMMessage& from);
  XPLMMessage(::google::protobuf::Arena* arena, XPLMMessage&& from) noexcept
      : XPLMMessage(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kReadLocalFrequentFieldNumber = 1,
    kReadLocalInfrequentFieldNumber = 2,
  };
  // .unifly.schema.ReadLocalFrequent read_local_frequent = 1;
  bool has_read_local_frequent() const;
  private:
  bool _internal_has_read_local_frequent() const;

  public:
  void clear_read_local_frequent() ;
  const ::unifly::schema::ReadLocalFrequent& read_local_frequent() const;
  PROTOBUF_NODISCARD ::unifly::schema::ReadLocalFrequent* release_read_local_frequent();
  ::unifly::schema::ReadLocalFrequent* mutable_read_local_frequent();
  void set_allocated_read_local_frequent(::unifly::schema::ReadLocalFrequent* value);
  void unsafe_arena_set_allocated_read_local_frequent(::unifly::schema::ReadLocalFrequent* value);
  ::unifly::schema::ReadLocalFrequent* unsafe_arena_release_read_local_frequent();

  private:
  const ::unifly::schema::ReadLocalFrequent& _internal_read_local_frequent() const;
  ::unifly::schema::ReadLocalFrequent* _internal_mutable_read_local_frequent();

  public:
  // .unifly.schema.ReadLocalInfrequent read_local_infrequent = 2;
  bool has_read_local_infrequent() const;
  private:
  bool _internal_has_read_local_infrequent() const;

  public:
  void clear_read_local_infrequent() ;
  const ::unifly::schema::ReadLocalInfrequent& read_local_infrequent() const;
  PROTOBUF_NODISCARD ::unifly::schema::ReadLocalInfrequent* release_read_local_infrequent();
  ::unifly::schema::ReadLocalInfrequent* mutable_read_local_infrequent();
  void set_allocated_read_local_infrequent(::unifly::schema::ReadLocalInfrequent* value);
  void unsafe_arena_set_allocated_read_local_infrequent(::unifly::schema::ReadLocalInfrequent* value);
  ::unifly::schema::ReadLocalInfrequent* unsafe_arena_release_read_local_infrequent();

  private:
  const ::unifly::schema::ReadLocalInfrequent& _internal_read_local_infrequent() const;
  ::unifly::schema::ReadLocalInfrequent* _internal_mutable_read_local_infrequent();

  public:
  void clear_kind();
  KindCase kind_case() const;
  // @@protoc_insertion_point(class_scope:unifly.schema.XPLMMessage)
 private:
  class _Internal;
  void set_has_read_local_frequent();
  void set_has_read_local_infrequent();
  inline bool has_kind() const;
  inline void clear_has_kind();
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 2, 2,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const XPLMMessage& from_msg);
    union KindUnion {
      constexpr KindUnion() : _constinit_{} {}
      ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::unifly::schema::ReadLocalFrequent* read_local_frequent_;
      ::unifly::schema::ReadLocalInfrequent* read_local_infrequent_;
    } kind_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_message_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// XPlaneMessage

// .unifly.schema.WriteRemoteFrequent write_remote_frequent = 1;
inline bool XPlaneMessage::has_write_remote_frequent() const {
  return kind_case() == kWriteRemoteFrequent;
}
inline bool XPlaneMessage::_internal_has_write_remote_frequent() const {
  return kind_case() == kWriteRemoteFrequent;
}
inline void XPlaneMessage::set_has_write_remote_frequent() {
  _impl_._oneof_case_[0] = kWriteRemoteFrequent;
}
inline ::unifly::schema::WriteRemoteFrequent* XPlaneMessage::release_write_remote_frequent() {
  // @@protoc_insertion_point(field_release:unifly.schema.XPlaneMessage.write_remote_frequent)
  if (kind_case() == kWriteRemoteFrequent) {
    clear_has_kind();
    auto* temp = _impl_.kind_.write_remote_frequent_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.kind_.write_remote_frequent_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::unifly::schema::WriteRemoteFrequent& XPlaneMessage::_internal_write_remote_frequent() const {
  return kind_case() == kWriteRemoteFrequent ? *_impl_.kind_.write_remote_frequent_ : reinterpret_cast<::unifly::schema::WriteRemoteFrequent&>(::unifly::schema::_WriteRemoteFrequent_default_instance_);
}
inline const ::unifly::schema::WriteRemoteFrequent& XPlaneMessage::write_remote_frequent() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:unifly.schema.XPlaneMessage.write_remote_frequent)
  return _internal_write_remote_frequent();
}
inline ::unifly::schema::WriteRemoteFrequent* XPlaneMessage::unsafe_arena_release_write_remote_frequent() {
  // @@protoc_insertion_point(field_unsafe_arena_release:unifly.schema.XPlaneMessage.write_remote_frequent)
  if (kind_case() == kWriteRemoteFrequent) {
    clear_has_kind();
    auto* temp = _impl_.kind_.write_remote_frequent_;
    _impl_.kind_.write_remote_frequent_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void XPlaneMessage::unsafe_arena_set_allocated_write_remote_frequent(::unifly::schema::WriteRemoteFrequent* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_kind();
  if (value) {
    set_has_write_remote_frequent();
    _impl_.kind_.write_remote_frequent_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:unifly.schema.XPlaneMessage.write_remote_frequent)
}
inline ::unifly::schema::WriteRemoteFrequent* XPlaneMessage::_internal_mutable_write_remote_frequent() {
  if (kind_case() != kWriteRemoteFrequent) {
    clear_kind();
    set_has_write_remote_frequent();
    _impl_.kind_.write_remote_frequent_ =
        ::google::protobuf::Message::DefaultConstruct<::unifly::schema::WriteRemoteFrequent>(GetArena());
  }
  return _impl_.kind_.write_remote_frequent_;
}
inline ::unifly::schema::WriteRemoteFrequent* XPlaneMessage::mutable_write_remote_frequent() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::unifly::schema::WriteRemoteFrequent* _msg = _internal_mutable_write_remote_frequent();
  // @@protoc_insertion_point(field_mutable:unifly.schema.XPlaneMessage.write_remote_frequent)
  return _msg;
}

// .unifly.schema.WriteRemoteInfrequent write_remote_infrequent = 2;
inline bool XPlaneMessage::has_write_remote_infrequent() const {
  return kind_case() == kWriteRemoteInfrequent;
}
inline bool XPlaneMessage::_internal_has_write_remote_infrequent() const {
  return kind_case() == kWriteRemoteInfrequent;
}
inline void XPlaneMessage::set_has_write_remote_infrequent() {
  _impl_._oneof_case_[0] = kWriteRemoteInfrequent;
}
inline ::unifly::schema::WriteRemoteInfrequent* XPlaneMessage::release_write_remote_infrequent() {
  // @@protoc_insertion_point(field_release:unifly.schema.XPlaneMessage.write_remote_infrequent)
  if (kind_case() == kWriteRemoteInfrequent) {
    clear_has_kind();
    auto* temp = _impl_.kind_.write_remote_infrequent_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.kind_.write_remote_infrequent_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::unifly::schema::WriteRemoteInfrequent& XPlaneMessage::_internal_write_remote_infrequent() const {
  return kind_case() == kWriteRemoteInfrequent ? *_impl_.kind_.write_remote_infrequent_ : reinterpret_cast<::unifly::schema::WriteRemoteInfrequent&>(::unifly::schema::_WriteRemoteInfrequent_default_instance_);
}
inline const ::unifly::schema::WriteRemoteInfrequent& XPlaneMessage::write_remote_infrequent() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:unifly.schema.XPlaneMessage.write_remote_infrequent)
  return _internal_write_remote_infrequent();
}
inline ::unifly::schema::WriteRemoteInfrequent* XPlaneMessage::unsafe_arena_release_write_remote_infrequent() {
  // @@protoc_insertion_point(field_unsafe_arena_release:unifly.schema.XPlaneMessage.write_remote_infrequent)
  if (kind_case() == kWriteRemoteInfrequent) {
    clear_has_kind();
    auto* temp = _impl_.kind_.write_remote_infrequent_;
    _impl_.kind_.write_remote_infrequent_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void XPlaneMessage::unsafe_arena_set_allocated_write_remote_infrequent(::unifly::schema::WriteRemoteInfrequent* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_kind();
  if (value) {
    set_has_write_remote_infrequent();
    _impl_.kind_.write_remote_infrequent_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:unifly.schema.XPlaneMessage.write_remote_infrequent)
}
inline ::unifly::schema::WriteRemoteInfrequent* XPlaneMessage::_internal_mutable_write_remote_infrequent() {
  if (kind_case() != kWriteRemoteInfrequent) {
    clear_kind();
    set_has_write_remote_infrequent();
    _impl_.kind_.write_remote_infrequent_ =
        ::google::protobuf::Message::DefaultConstruct<::unifly::schema::WriteRemoteInfrequent>(GetArena());
  }
  return _impl_.kind_.write_remote_infrequent_;
}
inline ::unifly::schema::WriteRemoteInfrequent* XPlaneMessage::mutable_write_remote_infrequent() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::unifly::schema::WriteRemoteInfrequent* _msg = _internal_mutable_write_remote_infrequent();
  // @@protoc_insertion_point(field_mutable:unifly.schema.XPlaneMessage.write_remote_infrequent)
  return _msg;
}

inline bool XPlaneMessage::has_kind() const {
  return kind_case() != KIND_NOT_SET;
}
inline void XPlaneMessage::clear_has_kind() {
  _impl_._oneof_case_[0] = KIND_NOT_SET;
}
inline XPlaneMessage::KindCase XPlaneMessage::kind_case() const {
  return XPlaneMessage::KindCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// XPLMMessage

// .unifly.schema.ReadLocalFrequent read_local_frequent = 1;
inline bool XPLMMessage::has_read_local_frequent() const {
  return kind_case() == kReadLocalFrequent;
}
inline bool XPLMMessage::_internal_has_read_local_frequent() const {
  return kind_case() == kReadLocalFrequent;
}
inline void XPLMMessage::set_has_read_local_frequent() {
  _impl_._oneof_case_[0] = kReadLocalFrequent;
}
inline ::unifly::schema::ReadLocalFrequent* XPLMMessage::release_read_local_frequent() {
  // @@protoc_insertion_point(field_release:unifly.schema.XPLMMessage.read_local_frequent)
  if (kind_case() == kReadLocalFrequent) {
    clear_has_kind();
    auto* temp = _impl_.kind_.read_local_frequent_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.kind_.read_local_frequent_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::unifly::schema::ReadLocalFrequent& XPLMMessage::_internal_read_local_frequent() const {
  return kind_case() == kReadLocalFrequent ? *_impl_.kind_.read_local_frequent_ : reinterpret_cast<::unifly::schema::ReadLocalFrequent&>(::unifly::schema::_ReadLocalFrequent_default_instance_);
}
inline const ::unifly::schema::ReadLocalFrequent& XPLMMessage::read_local_frequent() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:unifly.schema.XPLMMessage.read_local_frequent)
  return _internal_read_local_frequent();
}
inline ::unifly::schema::ReadLocalFrequent* XPLMMessage::unsafe_arena_release_read_local_frequent() {
  // @@protoc_insertion_point(field_unsafe_arena_release:unifly.schema.XPLMMessage.read_local_frequent)
  if (kind_case() == kReadLocalFrequent) {
    clear_has_kind();
    auto* temp = _impl_.kind_.read_local_frequent_;
    _impl_.kind_.read_local_frequent_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void XPLMMessage::unsafe_arena_set_allocated_read_local_frequent(::unifly::schema::ReadLocalFrequent* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_kind();
  if (value) {
    set_has_read_local_frequent();
    _impl_.kind_.read_local_frequent_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:unifly.schema.XPLMMessage.read_local_frequent)
}
inline ::unifly::schema::ReadLocalFrequent* XPLMMessage::_internal_mutable_read_local_frequent() {
  if (kind_case() != kReadLocalFrequent) {
    clear_kind();
    set_has_read_local_frequent();
    _impl_.kind_.read_local_frequent_ =
        ::google::protobuf::Message::DefaultConstruct<::unifly::schema::ReadLocalFrequent>(GetArena());
  }
  return _impl_.kind_.read_local_frequent_;
}
inline ::unifly::schema::ReadLocalFrequent* XPLMMessage::mutable_read_local_frequent() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::unifly::schema::ReadLocalFrequent* _msg = _internal_mutable_read_local_frequent();
  // @@protoc_insertion_point(field_mutable:unifly.schema.XPLMMessage.read_local_frequent)
  return _msg;
}

// .unifly.schema.ReadLocalInfrequent read_local_infrequent = 2;
inline bool XPLMMessage::has_read_local_infrequent() const {
  return kind_case() == kReadLocalInfrequent;
}
inline bool XPLMMessage::_internal_has_read_local_infrequent() const {
  return kind_case() == kReadLocalInfrequent;
}
inline void XPLMMessage::set_has_read_local_infrequent() {
  _impl_._oneof_case_[0] = kReadLocalInfrequent;
}
inline ::unifly::schema::ReadLocalInfrequent* XPLMMessage::release_read_local_infrequent() {
  // @@protoc_insertion_point(field_release:unifly.schema.XPLMMessage.read_local_infrequent)
  if (kind_case() == kReadLocalInfrequent) {
    clear_has_kind();
    auto* temp = _impl_.kind_.read_local_infrequent_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.kind_.read_local_infrequent_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::unifly::schema::ReadLocalInfrequent& XPLMMessage::_internal_read_local_infrequent() const {
  return kind_case() == kReadLocalInfrequent ? *_impl_.kind_.read_local_infrequent_ : reinterpret_cast<::unifly::schema::ReadLocalInfrequent&>(::unifly::schema::_ReadLocalInfrequent_default_instance_);
}
inline const ::unifly::schema::ReadLocalInfrequent& XPLMMessage::read_local_infrequent() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:unifly.schema.XPLMMessage.read_local_infrequent)
  return _internal_read_local_infrequent();
}
inline ::unifly::schema::ReadLocalInfrequent* XPLMMessage::unsafe_arena_release_read_local_infrequent() {
  // @@protoc_insertion_point(field_unsafe_arena_release:unifly.schema.XPLMMessage.read_local_infrequent)
  if (kind_case() == kReadLocalInfrequent) {
    clear_has_kind();
    auto* temp = _impl_.kind_.read_local_infrequent_;
    _impl_.kind_.read_local_infrequent_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void XPLMMessage::unsafe_arena_set_allocated_read_local_infrequent(::unifly::schema::ReadLocalInfrequent* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_kind();
  if (value) {
    set_has_read_local_infrequent();
    _impl_.kind_.read_local_infrequent_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:unifly.schema.XPLMMessage.read_local_infrequent)
}
inline ::unifly::schema::ReadLocalInfrequent* XPLMMessage::_internal_mutable_read_local_infrequent() {
  if (kind_case() != kReadLocalInfrequent) {
    clear_kind();
    set_has_read_local_infrequent();
    _impl_.kind_.read_local_infrequent_ =
        ::google::protobuf::Message::DefaultConstruct<::unifly::schema::ReadLocalInfrequent>(GetArena());
  }
  return _impl_.kind_.read_local_infrequent_;
}
inline ::unifly::schema::ReadLocalInfrequent* XPLMMessage::mutable_read_local_infrequent() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::unifly::schema::ReadLocalInfrequent* _msg = _internal_mutable_read_local_infrequent();
  // @@protoc_insertion_point(field_mutable:unifly.schema.XPLMMessage.read_local_infrequent)
  return _msg;
}

inline bool XPLMMessage::has_kind() const {
  return kind_case() != KIND_NOT_SET;
}
inline void XPLMMessage::clear_has_kind() {
  _impl_._oneof_case_[0] = KIND_NOT_SET;
}
inline XPLMMessage::KindCase XPLMMessage::kind_case() const {
  return XPLMMessage::KindCase(_impl_._oneof_case_[0]);
}
#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace schema
}  // namespace unifly


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // message_2eproto_2epb_2eh
